lua_package_cpath "/usr/local/share/lua/5.1/?.so;;";


server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Your existing ModSecurity and Lua configurations
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity.conf;

    # Lua test endpoints
    location /admin {
        content_by_lua_block {
            local auth = ngx.var.http_authorization
            if not auth or auth ~= "Basic " .. ngx.encode_base64("admin:password") then
                ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            ngx.say("Access granted!")
        }
    }

     location /core_example {
        content_by_lua_block {
            ngx.say("Time now: ", ngx.now(), ", Date: ", ngx.today())
        }
    }

    # location /cache_demo {
    #         content_by_lua_block {
    #             local lrucache = require("resty.lrucache")
    #             local cache, err = lrucache.new(100)  -- up to 100 items
    #             if not cache then
    #                 ngx.say("Failed to create cache: ", err)
    #                 return
    #             end

    #             cache:set("foo", "bar", 10) 
    #             local val = cache:get("foo")
    #             if val == nil then
    #                 ngx.say("cache miss")
    #             else
    #                 ngx.say("cache hit: ", val)
    #             end
    #             ngx.say(val or "cache miss")
    #         }
    #     }


    #   location /dns_lookup {
    #     content_by_lua_block {
    #         local resolver = require "resty.dns.resolver"
    #         local r, err = resolver:new{
    #             nameservers = {"8.8.8.8", {"8.8.4.4", 53}},  
    #             retrans = 5,   -- 5 retries on timeout
    #             timeout = 2000,  -- 2 sec timeout
    #             no_random = true,  -- always use first nameserver first
    #         }
    #         if not r then
    #             ngx.say("Failed to init resolver: ", err)
    #             return
    #         end

    #         local answers, err, tries = r:query("www.google.com", nil, {})
    #         if not answers then
    #             ngx.say("DNS query failed: ", err)
    #             ngx.say("Retry history: ", table.concat(tries or {}, "; "))
    #             return
    #         end
    #         if answers.errcode then
    #             ngx.say("DNS server error code: ", answers.errcode, ": ", answers.errstr)
    #         end

    #         for i, ans in ipairs(answers) do
    #             ngx.say(ans.name, " -> ", ans.address or ans.cname,
    #                     " (type:", ans.type, " TTL:", ans.ttl, ")")
    #         end
    #     }
    # }

    #  location /redis_demo {
    #     content_by_lua_block {
    #         local redis = require "resty.redis"
    #         local red = redis:new()
    #         red:set_timeout(1000)  -- 1 sec timeout for network ops
    #         local ok, err = red:connect("127.0.0.1", 6379)
    #         if not ok then
    #             ngx.say("Failed to connect: ", err)
    #             return
    #         end

    #         -- Set a key
    #         local ok, err = red:set("mykey", "hello")
    #         if not ok then
    #             ngx.say("Failed to SET: ", err)
    #             return
    #         end

    #         -- Get the key
    #         local res, err = red:get("mykey")
    #         if err then
    #             ngx.say("Failed to GET: ", err)
    #             return
    #         end
    #         if res == ngx.null then
    #             ngx.say("Key not found")
    #         else
    #             ngx.say("Got value: ", res)
    #         end

    #         red:set_keepalive(10000, 100)  -- put connection back in pool
    #     }
    # }

    # location /memc_demo {
    #     content_by_lua_block {
    #         local memcached = require "resty.memcached"
    #         local memc, err = memcached:new()
    #         if not memc then
    #             ngx.say("Failed to instantiate memc: ", err)
    #             return
    #         end
    #         memc:set_timeout(1000)  -- 1 sec

    #         -- Connect to Memcached on localhost:11211
    #         local ok, err = memc:connect("127.0.0.1", 11211)
    #         if not ok then
    #             ngx.say("Failed to connect: ", err)
    #             return
    #         end

    #         -- (Optional) clear all data in Memcached (flush)
    #         local ok, err = memc:flush_all()
    #         if not ok then
    #             ngx.say("Failed to flush all: ", err)
    #             return
    #         end

    #         -- Set a key in memcached
    #         local ok, err = memc:set("dog", 32)
    #         if not ok then
    #             ngx.say("Failed to set dog: ", err)
    #             return
    #         end

    #         -- Get the key back
    #         local res, flags, err = memc:get("dog")
    #         if err then
    #             ngx.say("Failed to get dog: ", err)
    #             return
    #         end
    #         if not res then
    #             ngx.say("dog not found")
    #             return
    #         end

    #         ngx.say("dog: ", res)

    #         -- return the connection to the pool (100 connections, 10s idle)
    #         local ok, err = memc:set_keepalive(10000, 100)
    #         if not ok then
    #             ngx.say("cannot set keepalive: ", err)
    #             return
    #         end
    #     }
    # }

    location /shell_demo {
        content_by_lua_block {
            local shell = require "resty.shell"
            -- Run a shell command (echo), no stdin, default timeout, default max_output size
            local ok, stdout, stderr, reason, status = shell.run("echo 'Hello, OpenResty!'")
            if not ok then
                ngx.say("Command failed (", reason, "), status: ", status)
            else
                ngx.say("Output: ", stdout)
            end
        }
    }

    # location /ws_echo {
    # content_by_lua_block {
    #     local server = require "resty.websocket.server"
    #     local wb, err = server:new{
    #         timeout = 5000,          -- 5 sec timeout for recv
    #         max_payload_len = 65535,
    #     }
    #     if not wb then
    #         ngx.log(ngx.ERR, "WebSocket handshake failed: ", err)
    #         return ngx.exit(444)
    #     end

    #     while true do
    #         local data, typ, err = wb:recv_frame()
    #         if not data then
    #             if err and string.find(err, "timeout", 1, true) then
    #                 -- ignore timeout and continue waiting
    #                 goto continue
    #             end
    #             ngx.log(ngx.ERR, "Failed to receive frame: ", err)
    #             return ngx.exit(444)
    #         end

    #         if typ == "close" then
    #             local code = err  -- status code from closing frame
    #             wb:send_close(1000, "Closing")
    #             ngx.log(ngx.INFO, "Closing websocket (status ", code, ")")
    #             return
    #         elseif typ == "ping" then
    #             local bytes, err = wb:send_pong(data)
    #             if not bytes then
    #                 ngx.log(ngx.ERR, "Failed to send pong: ", err)
    #                 return
    #             end
    #         elseif typ == "pong" then
    #             -- Just ignore incoming pong frames.
    #         elseif typ == "text" then
    #             local bytes, err = wb:send_text(data)
    #             if not bytes then
    #                 ngx.log(ngx.ERR, "Failed to send text: ", err)
    #                 return
    #             end
    #         elseif typ == "binary" then
    #             local bytes, err = wb:send_binary(data)
    #             if not bytes then
    #                 ngx.log(ngx.ERR, "Failed to send binary: ", err)
    #                 return
    #             end
    #         end

    #         ::continue::
    #     end
    # }
    # }


     location /upload_endpoint {
        content_by_lua_block {
            local upload = require "resty.upload"
            local form, err = upload:new(4096)  -- 4KB chunk size
            if not form then
                ngx.say("Failed to initialize upload: ", err)
                return
            end

            local file
            while true do
                local typ, res, err = form:read()
                if not typ then
                    ngx.say("Failed to read: ", err)
                    return
                end

                if typ == "header" then
                    local header_name, header_value = res[1], res[2]
                    if header_name == "Content-Disposition" then
                        -- Extract filename from Content-Disposition header
                        local filename = header_value:match('filename="([^"]+)"')
                        if filename then
                            file = io.open("/tmp/"..filename, "w+")
                            if not file then
                                ngx.say("Failed to open file ", filename)
                                return
                            end
                        end
                    end

                elseif typ == "body" then
                    -- got a chunk of file body
                    if file then
                        file:write(res)  -- write chunk to file
                    end

                elseif typ == "part_end" then
                    -- one file finished
                    if file then
                        file:close()
                        file = nil
                    end

                elseif typ == "eof" then
                    break  -- finished reading all parts
                end
            end

            ngx.say("Upload processing done")
        }
    }

    location /mysql_demo {
        content_by_lua_block {
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                ngx.say("Failed to instantiate mysql: ", err)
                return
            end
            db:set_timeout(1000)  -- 1 sec

            local ok, err, errcode, sqlstate = db:connect{
                host = "127.0.0.1",
                port = 3306,
                database = "testdb",
                user = "testuser",
                password = "secret",
                charset = "utf8",
                max_packet_size = 1024 * 1024,
            }
            if not ok then
                ngx.say("Failed to connect: ", err, ": ", errcode, " ", sqlstate)
                return
            end
            ngx.say("Connected to MySQL.")

            local res, err, errcode, sqlstate = db:query("SELECT 1 as one")
            if not res then
                ngx.say("Query error: ", err, ": ", errcode, " ", sqlstate)
                db:close()
                return
            end
            ngx.say("Result: ", res[1].one)  -- print field value

            -- Return connection to pool (max 100 connections, 10s idle)
            local ok, err = db:set_keepalive(10000, 100)
            if not ok then
                ngx.say("Failed to set keepalive: ", err)
                db:close()
            end
        }
    }

    #  location /secure/ {
    #         access_by_lua_file /etc/nginx/lua/bearer.lua;
            
    #         content_by_lua_block {
    #             ngx.say("JWT authentication succeeded!")
    #         }
    #     }

    location /api {
        default_type application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local data = { message = "Hello, Lua!", timestamp = os.time() }
            ngx.say(cjson.encode(data))
        }
    }

    location /lua_security_test {
        content_by_lua_block {
            local bad_patterns = { "script", "SELECT", "UNION" }
            local query = ngx.var.query_string or ""
            for _, pattern in ipairs(bad_patterns) do
                if string.find(query, pattern, 1, true) then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            end
            ngx.say("Query is safe!")
        }
    }

    location /say_hello_lua {
        content_by_lua_block {
                ngx.say("Hello from lua-nginx-module!")
            }
    }


    location /lua_log_test {
        content_by_lua_block {
            local file = io.open("/var/log/nginx/lua_requests.log", "a")
            if file then
                file:write(os.date() .. " - " .. ngx.var.remote_addr .. " accessed " .. ngx.var.request_uri .. "\n")
                file:close()
            end
            ngx.say("Logged your request!")
        }
    }

    # Add other locations and configurations here
}