server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Your existing ModSecurity and Lua configurations
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity.conf;

    # Lua test endpoints
    location /admin {
        content_by_lua_block {
            local auth = ngx.var.http_authorization
            if not auth or auth ~= "Basic " .. ngx.encode_base64("admin:password") then
                ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            ngx.say("Access granted!")
        }
    }

    location /api {
        default_type application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local data = { message = "Hello, Lua!", timestamp = os.time() }
            ngx.say(cjson.encode(data))
        }
    }

    location /lua_security_test {
        content_by_lua_block {
            local bad_patterns = { "script", "SELECT", "UNION" }
            local query = ngx.var.query_string or ""
            for _, pattern in ipairs(bad_patterns) do
                if string.find(query, pattern, 1, true) then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            end
            ngx.say("Query is safe!")
        }
    }

    location /say_hello_lua {
        content_by_lua_block {
                ngx.say("Hello from lua-nginx-module!")
            }
    }


    location /lua_log_test {
        content_by_lua_block {
            local file = io.open("/var/log/nginx/lua_requests.log", "a")
            if file then
                file:write(os.date() .. " - " .. ngx.var.remote_addr .. " accessed " .. ngx.var.request_uri .. "\n")
                file:close()
            end
            ngx.say("Logged your request!")
        }
    }

    # Add other locations and configurations here
}